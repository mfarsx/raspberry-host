# Raspberry Pi 5 Hosting Platform - Production
# Complete self-contained production setup

services:
  # Reverse Proxy with automatic HTTPS
  caddy:
    image: ${CADDY_IMAGE:-caddy:2-alpine}
    container_name: ${CADDY_CONTAINER_NAME:-pi-caddy}
    restart: ${CADDY_RESTART_POLICY:-unless-stopped}
    ports:
      - "${CADDY_HTTP_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
    volumes:
      - ${CADDY_CONFIG_FILE:-./Caddyfile.dev}:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - TLS_EMAIL=${TLS_EMAIL:-admin@localhost}
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "caddy", "healthcheck", "--config", "/etc/caddy/Caddyfile" ]
      interval: ${CADDY_HEALTH_INTERVAL:-30s}
      timeout: ${CADDY_HEALTH_TIMEOUT:-10s}
      retries: ${CADDY_HEALTH_RETRIES:-3}
      start_period: ${CADDY_HEALTH_START_PERIOD:-10s}
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # Node.js API Backend
  api:
    build:
      context: ${API_BUILD_CONTEXT:-./api}
      dockerfile: ${API_DOCKERFILE:-Dockerfile}
      target: ${API_BUILD_TARGET:-production}
      platforms:
        - ${DOCKER_PLATFORM:-linux/arm64}
    container_name: ${API_CONTAINER_NAME:-pi-api}
    restart: ${API_RESTART_POLICY:-unless-stopped}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${API_PORT:-3001}
      - MONGO_URL=${MONGO_URL:-mongodb://${MONGO_USERNAME:-pi_user}:${MONGO_ROOT_PASSWORD}@mongodb:${MONGO_PORT:-27017}/${MONGO_DATABASE:-pi_app}}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - REDIS_URL=${REDIS_URL:-redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT:-6379}}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://${DOMAIN}}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROJECTS_DIR=${PROJECTS_DIR:-./projects}
      - MAX_CONCURRENT_DEPLOYMENTS=${MAX_CONCURRENT_DEPLOYMENTS:-3}
      - DEPLOYMENT_TIMEOUT=${DEPLOYMENT_TIMEOUT:-300000}
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
      - ${PROJECTS_DIR:-./projects}:/app/projects
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_PORT:-3001}/api/health" ]
      interval: ${API_HEALTH_INTERVAL:-30s}
      timeout: ${API_HEALTH_TIMEOUT:-10s}
      retries: ${API_HEALTH_RETRIES:-3}
      start_period: ${API_HEALTH_START_PERIOD:-40s}
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # React Frontend
  web:
    build:
      context: ${WEB_BUILD_CONTEXT:-./web}
      dockerfile: ${WEB_DOCKERFILE:-Dockerfile}
      target: ${WEB_BUILD_TARGET:-production}
      platforms:
        - ${DOCKER_PLATFORM:-linux/arm64}
    container_name: ${WEB_CONTAINER_NAME:-pi-web}
    restart: ${WEB_RESTART_POLICY:-unless-stopped}
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://${DOMAIN}/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-wss://${DOMAIN}/ws}
      - REACT_APP_ENV=${REACT_APP_ENV:-production}
      - REACT_APP_DOMAIN=${DOMAIN}
    volumes:
      - web_build:/app/build
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${WEB_INTERNAL_PORT:-80}" ]
      interval: ${WEB_HEALTH_INTERVAL:-30s}
      timeout: ${WEB_HEALTH_TIMEOUT:-10s}
      retries: ${WEB_HEALTH_RETRIES:-3}
      start_period: ${WEB_HEALTH_START_PERIOD:-30s}
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # MongoDB Database
  mongodb:
    image: ${MONGO_IMAGE:-mongo:7.0-jammy}
    container_name: ${MONGO_CONTAINER_NAME:-pi-mongodb}
    restart: ${MONGO_RESTART_POLICY:-unless-stopped}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-pi_app}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - mongodb_logs:/var/log/mongodb
      - ${MONGO_INIT_SCRIPT:-./scripts/mongo-init.js}:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: >
      mongod --auth --bind_ip_all --logpath /var/log/mongodb/mongod.log --logappend --wiredTigerCacheSizeGB ${MONGO_CACHE_SIZE_GB:-0.5}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: ${MONGO_HEALTH_INTERVAL:-30s}
      timeout: ${MONGO_HEALTH_TIMEOUT:-10s}
      retries: ${MONGO_HEALTH_RETRIES:-5}
      start_period: ${MONGO_HEALTH_START_PERIOD:-40s}
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # Redis Cache
  redis:
    image: ${REDIS_IMAGE:-redis:7.2-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-pi-redis}
    restart: ${REDIS_RESTART_POLICY:-unless-stopped}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru} --save ${REDIS_SAVE_INTERVAL_1:-900} ${REDIS_SAVE_CHANGES_1:-1} --save ${REDIS_SAVE_INTERVAL_2:-300} ${REDIS_SAVE_CHANGES_2:-10} --save ${REDIS_SAVE_INTERVAL_3:-60} ${REDIS_SAVE_CHANGES_3:-10000}
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: ${REDIS_HEALTH_INTERVAL:-30s}
      timeout: ${REDIS_HEALTH_TIMEOUT:-10s}
      retries: ${REDIS_HEALTH_RETRIES:-3}
      start_period: ${REDIS_HEALTH_START_PERIOD:-20s}
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

  # Auto-updater
  watchtower:
    image: ${WATCHTOWER_IMAGE:-containrrr/watchtower:latest}
    container_name: ${WATCHTOWER_CONTAINER_NAME:-pi-watchtower}
    restart: ${WATCHTOWER_RESTART_POLICY:-unless-stopped}
    volumes:
      - ${DOCKER_SOCKET_PATH:-/var/run/docker.sock}:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=${WATCHTOWER_CLEANUP:-true}
      - WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_POLL_INTERVAL:-3600}
      - WATCHTOWER_INCLUDE_STOPPED=${WATCHTOWER_INCLUDE_STOPPED:-true}
      - WATCHTOWER_REVIVE_STOPPED=${WATCHTOWER_REVIVE_STOPPED:-true}
    command: --interval ${WATCHTOWER_INTERVAL:-3600} --cleanup
    networks:
      - pi-network
    logging:
      driver: "${LOG_DRIVER:-json-file}"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

volumes:
  # Caddy volumes
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local

  # Application volumes
  web_build:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local

  # Database volumes
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  mongodb_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local

networks:
  ${DOCKER_NETWORK_NAME:-pi-network}:
    driver: ${DOCKER_NETWORK_DRIVER:-bridge}
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET:-172.20.0.0/16}
