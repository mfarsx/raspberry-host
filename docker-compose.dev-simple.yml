# Raspberry Pi 5 Hosting Platform - Simple Development
# Development setup without authentication for easier testing

services:
  # Node.js API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: pi-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGO_URL=mongodb://mongodb:27017/pi_app_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
      - MONGO_ROOT_PASSWORD=devpassword
      - REDIS_PASSWORD=devpassword
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pi-network

  # React Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: pi-web-dev
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_WS_URL=ws://localhost:3001/ws
      - REACT_APP_ENV=development
    ports:
      - "3000:80"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pi-network

  # MongoDB Database (no auth for development)
  mongodb:
    image: mongo:7.0-jammy
    container_name: pi-mongodb-dev
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=pi_app_dev
    ports:
      - "27017:27017"
    command: mongod --bind_ip_all
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - pi-network

  # Redis Cache (no auth for development)
  redis:
    image: redis:7.2-alpine
    container_name: pi-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - pi-network

networks:
  pi-network:
    driver: bridge