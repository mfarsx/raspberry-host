# Raspberry Pi 5 Hosting Platform - macOS Production
# Complete self-contained production setup for macOS development

services:
  # Reverse Proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: pi-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - TLS_EMAIL=${TLS_EMAIL:-admin@localhost}
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "caddy", "healthcheck", "--config", "/etc/caddy/Caddyfile" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Node.js API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: pi-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGO_URL=${MONGO_URL:-mongodb://pi_user:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE:-pi_app}}
      - REDIS_URL=${REDIS_URL:-redis://:${REDIS_PASSWORD}@redis:6379}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-devpassword}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devpassword}
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # React Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: pi-web
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_WS_URL=ws://localhost/ws
      - REACT_APP_ENV=production
    volumes:
      - web_build:/app/build
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: pi-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-devpassword}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-pi_app}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - mongodb_logs:/var/log/mongodb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: >
      mongod  --auth  --bind_ip_all  --logpath /var/log/mongodb/mongod.log --logappend --wiredTigerCacheSizeGB 0.5
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: pi-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devpassword}
    command: >
      redis-server  --appendonly yes  --requirepass ${REDIS_PASSWORD:-devpassword} --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Auto-updater
  watchtower:
    image: containrrr/watchtower:latest
    container_name: pi-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
    command: --interval 3600 --cleanup
    networks:
      - pi-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  # Caddy volumes
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local

  # Application volumes
  web_build:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local

  # Database volumes
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  mongodb_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local

networks:
  pi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16